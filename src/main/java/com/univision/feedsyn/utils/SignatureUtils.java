package com.univision.feedsyn.utils;

import java.util.Map;
import java.util.TreeMap;

/**
 * Utility class for working with signatures for Feed Syndicator security.
 */
public abstract class SignatureUtils {

    /**
     * <p>Generates a signature by computing the SHA digest as a hex string of the following values concatenated together:</p>
     * <p>
     * <ol>
     * <li>HTTP verb e.g. GET</li>
     * <li>The partner's client id</li>
     * <li>The URL path e.g. /example/path</li>
     * <li>The query string excluding the signature, with the parameters in alphabetical order e.g. ?a=vala&amp;b=valb</li>
     * <li>The form parameters in alphabetical order with no separators e.g. param1val1param2val2</li>
     * <li>The partner's client secret</li>
     * </ol>
     * <p>
     * <p>When partners make a feed request, they must provide a signature that matches the one generated by this method.</p>
     *
     * @param httpVerb     The verb of the HTTP request.
     * @param path         the URL path of the HTTP request.
     * @param queryParams  The query parameters of the HTTP request, excluding the signature.
     * @param formParams   The form parameters of the HTTP request.
     * @param clientId     The client id of the partner making the request.
     * @param clientSecret The client secret of the partner making the request.
     * @return the signature for the request.
     */
    public static String generateSignature(String httpVerb, String path, Map<String, String> queryParams,
                                           Map<String, String> formParams, String clientId, String clientSecret) {

        StringBuilder builder = new StringBuilder();
        builder.append(httpVerb.toUpperCase());
        builder.append(clientId);
        builder.append(path);
        if (queryParams != null) {
            TreeMap<String, String> sortedQueryParams = new TreeMap<String, String>(queryParams);

            boolean first = true;
            for (Map.Entry<String, String> entry : sortedQueryParams.entrySet()) {
                if (first) {
                    builder.append("?");
                    first = false;
                } else {
                    builder.append("&");
                }
                builder.append(entry.getKey());
                builder.append("=");
                builder.append(entry.getValue());
            }
        }
        if (formParams != null) {
            TreeMap<String, String> sortedFormParams = new TreeMap<String, String>(formParams);
            for (Map.Entry<String, String> entry : sortedFormParams.entrySet()) {
                builder.append(entry.getKey());
                builder.append(entry.getValue());
            }
        }
        builder.append(clientSecret);
        String rawSignature = builder.toString();
        return StringUtils.hex(StringUtils.sha1((rawSignature)));
    }
}